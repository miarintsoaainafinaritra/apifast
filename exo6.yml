openapi: 3.0.0
info:
  title: User Profile API
  version: 1.0.0
paths:
  /users:
    post:
      summary: Créer des utilisateurs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateUserProfile'
            examples:
              create_users:
                summary: Exemple de création d'utilisateurs
                value:
                  - first_name: "John"
                    last_name: "Doe"
                    birthdate: "1990-01-15"
                    email: "john.doe@example.com"
                    address_street: "123 Main St"
                    address_city: "Antananarivo"
                    address_country: "Madagascar"
                    address_postal_code: "101"
                    needs_newsletter: true
                    language: "eng"
      responses:
        '201':
          description: Utilisateurs créés
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfile'
  /users/{id}:
    get:
      summary: Récupérer un utilisateur par ID
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          description: Utilisateur trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '404':
          description: Utilisateur non trouvé
  /users/{id}/personalInfo:
    put:
      summary: Mettre à jour les informations personnelles
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalInfo'
      responses:
        '200':
          description: Informations personnelles mises à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
  /users/{id}/address:
    put:
      summary: Mettre à jour l'adresse
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '200':
          description: Adresse mise à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
  /users/{id}/preferences:
    put:
      summary: Mettre à jour les préférences
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Preferences'
      responses:
        '200':
          description: Préférences mises à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
components:
  schemas:
    UserProfile:
      allOf:
        - $ref: '#/components/schemas/CreateUserProfile'
        - type: object
          properties:
            identifier:
              type: string
    CreateUserProfile:
      allOf:
        - $ref: '#/components/schemas/PersonalInfo'
        - $ref: '#/components/schemas/Address'
        - $ref: '#/components/schemas/Preferences'
    PersonalInfo:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        birthdate:
          type: string
          format: date
        email:
          type: string
          format: email
    Address:
      type: object
      properties:
        address_street:
          type: string
        address_city:
          type: string
        address_country:
          type: string
        address_postal_code:
          type: integer
    Preferences:
      type: object
      properties:
        needs_newsletter:
          type: boolean
        language:
          type: string
          enum: [mg, fr, eng]
  parameters:
    UserIdParam:
      name: id
      in: path
      required: true
      schema:
        type: string
      example: "user123"